import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from fenics import *
from tqdm import tqdm
import os

def solve_1d_burger(epsilon, length, n_x, dt, num_steps, expression_str=None, global_solution_idx=0):
    # Define mesh and function spaces

    # print(expression_str)

    mesh = IntervalMesh(n_x, 0, length)
    V = FunctionSpace(mesh, 'CG', 1)

    # Define initial condition
    x = SpatialCoordinate(mesh)
    print(x[0])
    u_init = Expression(expression_str, degree=2)
    u_n = interpolate(u_init, V)

    # Define test and trial functions
    u = TrialFunction(V)
    v = TestFunction(V)
    u_ = Function(V)

    # Define weak form
    F = (u - u_n) / dt * v * dx + u_ * u.dx(0) * v * dx + epsilon * u.dx(0) * v.dx(0) * dx
    a, L = lhs(F), rhs(F)

    # Time-stepping
    t = 0

    # Prepare for visualization
    fig, ax = plt.subplots()
    x_vals = mesh.coordinates()
    ax.set_xlim(0, length)
    ax.set_ylim(0, 1)
    plt.xlabel("x position")
    plt.ylabel("Velocity")
    plt.title("epsilon = 1")
    line, = ax.plot([], [], lw=2)

    # Initialize solution matrix
    u_val = []

    def update(frame, u_n, u, u_, t, dt):
        u_.assign(u_n)  # Update the non-linear term with the previous solution
        solve(a == L, u_)
        u_n.assign(u_)
        # print (u)
        # print (u_n)
        # print(u_)
        # u_val[frame, :] = u_n.compute_vertex_values()
        u_val.append(u_n.compute_vertex_values())
        t += dt
        line.set_data(x_vals, u_n.compute_vertex_values())
        return line,

    ani = animation.FuncAnimation(fig, update, frames=num_steps, fargs=(u_n, u, u_, t, dt),
                                interval=100, blit=False)
    plt.close()
    ani.save('./burger/vanishing_viscosity_piecewise_like_1.gif'.format(global_solution_idx), writer='pillow', fps=15)
    # os.remove('./burger/vanishing_viscosity_test_{}.gif'.format(global_solution_idx))
    global_solution_idx += 1
    return np.array(u_val)

def generate_2d_mesh(length, n_x):
    mesh = RectangleMesh(Point(0, 0), Point(length, length), n_x, n_x)

    return mesh

# def solve_2d_burger(mesh, epsilon, length, n_x, dt, num_steps, expression_str=None, global_solution_idx=0):
#     # Define mesh and function spaces
#     # mesh = RectangleMesh(Point(0, 0), Point(length, length), n_x, n_x)
#     V = FunctionSpace(mesh, 'CG', 1)

#     # Define initial condition
#     x = SpatialCoordinate(mesh)
#     u_init = Expression((expression_str,expression_str), degree=2)
#     u_n = interpolate(u_init, V)

#     # Define test and trial functions
#     u = TrialFunction(V)
#     v = TestFunction(V)
#     u_ = Function(V)
#     f = Constant(0,0)

#     # Define weak form
#     F = inner((u - u_n) / dt, v)*dx - dot(v, dot(u_n, grad(u)))*dx \
#         + epsilon*inner(grad(u), grad(v))*dx
#     a = lhs(F)
#     L = rhs(F)
#     # a = u * v * dx + epsilon * dot(grad(u), grad(v)) * dx
#     # L = u_init * v * dx

#     # Time-stepping
#     t = 0

#     # Prepare for visualization
#     fig, ax = plt.subplots()
#     x_vals = mesh.coordinates()
#     ax.set_xlim(0, length)
#     ax.set_ylim(0, length)
#     # square, = ax.plot([], [], lw=2)
    
#     u_vector = u_n.compute_vertex_values(mesh)
#     # compute the magnitude of the velocity
#     u_mag = np.sqrt(u_vector[:len(u_vector)//2]**2 + u_vector[len(u_vector)//2:]**2)

#     # Initialize solution matrix
#     u_val = []

#     def update(frame, u_n, u, u_, t, dt):
#         u_.assign(u_n)
#         solve(a == L, u_)
#         # solve(a == L, u_, bcs=[DirichletBC(V, 0, "on_boundary")])
#         u_n.assign(u_)
#         u_vector = u_n.compute_vertex_values()
#         u_mag = np.sqrt(u_vector[:len(u_vector)//2]**2 + u_vector[len(u_vector)//2:]**2)
#         # u_vals[frame, :, :] = u_n.compute_vertex_values().reshape((n_x+1, n_x+1))
#         # u_val.append(u_n.compute_vertex_values().reshape((n_x+1, n_x+1)))
#         u_val.append(u_mag)
        
#         for c in cont[0].collections:
#             c.remove()
#         cont[0] = ax.contourf(x_vals[:, 0].reshape((n_x+1, n_x+1)), x_vals[:, 1].reshape((n_x+1, n_x+1)), u_mag.reshape((n_x+1, n_x+1)))
        
        
#         t += dt
#         # square.set_data(u_n.x, u_n.y)
#         # return square,
#         return cont[0].colelctions,


#     ani = animation.FuncAnimation(fig, update, frames=num_steps, fargs=(u_n, u, u_, t, dt),
#                                 interval=100, blit=False)
    
#     ani.save('./burger/vanishing_viscosity_2d_1.gif'.format(global_solution_idx), writer='pillow', fps=15)
#     plt.close()
#     global_solution_idx += 1
#     return np.array(u_val)

def solve_2d_burger(mesh, epsilon, length, n_x, dt, num_steps, expression_str=None, global_solution_idx=0):
    # Define mesh and function spaces
    # mesh = RectangleMesh(Point(0, 0), Point(length, length), n_x, n_x)


    mesh = RectangleMesh(Point(0, 0), Point(length, length), n_x, n_x)
    
    V = VectorFunctionSpace(mesh, 'CG', 2)

    tol = 1E-16

    def left_boundary(x, on_boundary):
        return on_boundary and near(x[0], 0, tol)
    bcl = DirichletBC(V, Constant((0.0, 0.0)), left_boundary)

    def right_boundary(x, on_boundary):
        return on_boundary and near(x[0], length, tol)
    bcr = DirichletBC(V, Constant((0.0, 0.0)), right_boundary)


    def top_boundary(x, on_boundary):
        return on_boundary and near(x[1], length, tol)
    bct = DirichletBC(V, Constant((0.0, 0.0)), top_boundary)


    def bottom_boundary(x, on_boundary):
        return on_boundary and near(x[1], 0, tol)
    bcb = DirichletBC(V, Constant((0.0, 0.0)), bottom_boundary)

    bcs = [bcl, bcr, bct, bcb]
    # bc = DirichletBC(V, Constant((0.0,0.0)), boundary)


    # Define initial condition
    x = SpatialCoordinate(mesh)
    u_init = Expression((expression_str, expression_str), degree=2)
    u_n = interpolate(u_init, V)


    # Define test and trial functions
    u = TrialFunction(V)
    v = TestFunction(V)
    f = Constant((0, 0))
    u_ = Function(V)


    # Define weak form
    F = inner((u - u_n) / dt, v)*dx - dot(v, dot(u_n, grad(u)))*dx \
        + epsilon*inner(grad(u), grad(v))*dx
    a = lhs(F)
    L = rhs(F)

    # Time-stepping
    t = 0

    # Prepare for visualization
    fig, ax = plt.subplots()
    x_vals = mesh.coordinates()
    ax.set_xlim(0, length)
    ax.set_ylim(0, length)
    plt.xlabel("x")
    plt.ylabel("y")
    plt.title("epsilon = 10")

    # contours 

    u_vector = u_n.compute_vertex_values(mesh)
    # compute the magnitude of the velocity
    u_mag = np.sqrt(u_vector[:len(u_vector)//2]**2 + u_vector[len(u_vector)//2:]**2)

    cont = [ax.contourf(x_vals[:, 0].reshape((n_x+1, n_x+1)), x_vals[:, 1].reshape((n_x+1, n_x+1)), u_mag.reshape((n_x+1, n_x+1)))]
    
    plt.colorbar(cont[0])

    # vector fields?

    # u_array = u_n.compute_vertex_values(mesh)
    # n = int(len(u_array) / 2)
    # u_x = u_array[:n]
    # u_y = u_array[n:]

    # x_coords = x_vals[:, 0]
    # y_coords = x_vals[:, 1]

    # ax.quiver(x_coords, y_coords, u_x, u_y)

    # plt.show()


    # Initialize solution matrix
    u_val = []

    def update(frame, u_n, u, u_, t, dt):
        # global cont
        u_.assign(u_n)
        
        solve(a == L, u_, bcs)
        u_n.assign(u_)
        print("----------update check---------")

        # the next line is off
        # u_vals[frame, :, :] = u_n.compute_vertex_values().reshape((n_x+1, n_x+1))


        u_vector = u_n.compute_vertex_values()
        # compute the magnitude of the velocity


        u_mag = np.sqrt(u_vector[:len(u_vector)//2]**2 + u_vector[len(u_vector)//2:]**2)


        # vector fields
        # u_array = u_n.compute_vertex_values(mesh)
        # n = int(len(u_array) / 2)
        # u_x = u_array[:n]
        # u_y = u_array[n:]

        # x_coords = x_vals[:, 0]
        # y_coords = x_vals[:, 1]

        # ax.quiver(x_coords, y_coords, u_x, u_y)

        # plt.show()
        # u_val.append(u_array)

        #contorus
        u_val.append(u_vector)

        for c in cont[0].collections:
            c.remove()
        cont[0] = ax.contourf(x_vals[:, 0].reshape((n_x+1, n_x+1)), x_vals[:, 1].reshape((n_x+1, n_x+1)), u_mag.reshape((n_x+1, n_x+1)))

        t += dt

        
        return cont[0].collections,

    ani = animation.FuncAnimation(fig, update, frames=num_steps, fargs=(u_n, u, u_, t, dt),
                                interval=100, blit=False)
    
    ani.save('./burger/vanishing_viscosity_2d_10.gif'.format(global_solution_idx), writer='pillow', fps=15)
    print("----------------------saved--------------------")
    plt.close()
    global_solution_idx += 1
    return np.array(u_val)


def gen_random_expression_str():
    """
    generate a str expression for initial condition of burgers equation such as 'exp(-2*pow(x[0] - 1, 2))', 'sin(x[0])', etc.
    """
    return 'exp (-3*pow(x[0] - 2, 2))'
    # if x[0] < 1: return '1'
    # elif 1 < x[0] and x[0] < 2: return '1 + x/2'
    # else: return '2'

    
    # # function_type = np.random.choice(['exp', 'sin', 'cos', 'pow'])
    # function_type = np.random.choice(['sin'])
    # # x_center = np.random.uniform(0, 3)
    # x_center = 1
    # if function_type == 'exp':
    #     return function_type + '(-2*pow(x[0] - ' + str(x_center) + ', 2))'
    # elif function_type == 'pow':
    #     return function_type + '(x[0] - ' + str(x_center) + ', 2)'
    # else:
    #     return function_type + '(x[0] - ' + str(x_center) + ')'
    
def gen_random_expression_str_2d():
    """
    generate a str expression for initial condition of burgers equation using a Gaussian initial velocity distribution. The center of the Gaussian is randomly generated.
    """
    # x_center = np.random.uniform(0, 3)
    # y_center = np.random.uniform(0, 3)
    x_center = 5
    y_center = 5
    return 'exp(-2*pow(x[0] - ' + str(x_center) + ', 2) - 2*pow(x[1] - ' + str(y_center) + ', 2))'

# if __name__ == '__main__':
#     # Parameters
#     epsilon = 1
#     length = 10
#     n_x = 100
#     dt = 0.01
#     T = 2.0
#     num_steps = int(T/dt)
#     u_vals = []

#     # mesh = generate_1d_mesh(length, n_x)

#     for i in tqdm(range(1)):
#         exp_ = gen_random_expression_str()
#         u_val = solve_1d_burger(epsilon, length, n_x, dt, num_steps, exp_, i)
#         u_vals.append(u_val)

    np.save('./burger/burger_results.npy', u_vals)

if __name__ == '__main__':
    # Parameters
    epsilon = 3
    length = 10.0
    n_x = 100
    dt = 0.1
    T = 10.0
    num_steps = int(T/dt)
    # u_vals = []
    # mesh_resolutions = [20, 40, 80, 100]
    # mesh_all = [generate_2d_mesh(length, n_x) for n_x in mesh_resolutions]
    mesh_v = generate_2d_mesh(length, 20)
    u_val_res_1 = []
    # u_val_res_2 = []
    # u_val_res_3 = []
    # u_val_res_4 = []


    exp_ = gen_random_expression_str_2d()
    u_val = solve_2d_burger(mesh_v, epsilon, length, 20, dt, num_steps, exp_, 0)
    print("---------------------get solved---------------")
    
    u_val_res_1.append(u_val)
    

#     # for i in tqdm(range(4)):
#     #     exp_ = gen_random_expression_str_2d()
#     #     for i in range(len(mesh_resolutions)):
#     #         u_val = solve_2d_burger(mesh_all[i], epsilon, length, mesh_resolutions[i], dt, num_steps, exp_, i)
#     #         if i == 0:
#     #             u_val_res_1.append(u_val)
#     #         elif i == 1:
#     #             u_val_res_2.append(u_val)
#     #         elif i == 2:
#     #             u_val_res_3.append(u_val)
#     #         elif i == 3:
#     #             u_val_res_4.append(u_val)